#include <iostream>
#include <stack>
using namespace std;

const int MAX = 100; 
bool visited[MAX]; 
int Matrix[MAX][MAX]; 

void DFS(int n, int v) {
    stack<int> S;
    for (int i = 0; i < n; i++)
        visited[i] = false;
    S.push(v);
    while (!S.empty()) {
        int u = S.top();
        S.pop();
        if (!visited[u]) {
            visited[u] = true;
            for (int w = n - 1; w >= 0; w--) {
                if (Matrix[u][w] && !visited[w])
                    S.push(w);
            }
        }
    }
}
bool checkLienThong(int n) {
    DFS(n, 0); 
    for (int i = 0; i < n; i++) {
        if (!visited[i])
            return false;
    }
    return true;
}

int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> Matrix[i][j];
        }
    }
    if (checkLienThong(n))
        cout << "lien thong";
    else
        cout << "khong lien thong";

    return 0;
}
