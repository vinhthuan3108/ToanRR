//Giả sử thuật toán DFS bắt đầu từ đỉnh v1 (đỉnh xuất phát), hiển nhiên v1 là đỉnh đã được thăm (tìm thấy).
//Chọn v2 là một trong những đỉnh kề với v1 => v2 đã được thăm. 
//Tổng quát cho đỉnh vk và vk+1 nếu không còn đỉnh nào kề với vk (vk là đỉnh treo hoặc các đỉnh kề với nó đã được thăm) thì ta nói rằng đỉnh vk đã được duyệt.
//Quay lui về đỉnh vk−1 để tiếp tục tìm kiếm từ đỉnh này.
//Thuật toán kết thúc khi mọi đỉnh đã được thăm-duyệt
#include <iostream>
#include <stack>
using namespace std;
bool visited[100]; 
int matrix[100][100]; 
void DFS(int n, int v) {
    stack<int> S;
    for (int i = 0; i < n; i++)
        visited[i] = false;
    S.push(v);
    while (!S.empty()) {
        int u = S.top();
        S.pop();
        if (!visited[u]) {
            visited[u] = true;
            cout << u << " ";           
            for (int w = n - 1; w >= 0; w--) {
                if (matrix[u][w] && !visited[w]) {
                    S.push(w);
                }
            }
        }
    }
}
int main() {
    int n, v;
    cin >> n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }
    cin >> v;
    DFS(n,v);
    return 0;
}
